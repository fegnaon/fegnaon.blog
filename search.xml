<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学校课程</title>
      <link href="/fegnaon.blog/2021/10/06/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
      <url>/fegnaon.blog/2021/10/06/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h1><h5 id="平时成绩-30"><a href="#平时成绩-30" class="headerlink" title="平时成绩 30%"></a>平时成绩 30%</h5><p>​    云班课随堂测试（8次） 5%</p><p>​    慕课单元检测题 120min2次，去高分 5%</p><p>​    平时作业+纸质单元检测 20%</p><h5 id="期中考试-20"><a href="#期中考试-20" class="headerlink" title="期中考试 20%"></a>期中考试 20%</h5><h5 id="期末考试-50"><a href="#期末考试-50" class="headerlink" title="期末考试 50%"></a>期末考试 50%</h5><h1 id="程序设计与算法"><a href="#程序设计与算法" class="headerlink" title="程序设计与算法"></a>程序设计与算法</h1><h5 id="慕课成绩-10"><a href="#慕课成绩-10" class="headerlink" title="慕课成绩 10%"></a>慕课成绩 10%</h5><p>​    视频单元考核 3%</p><p>​    作业单元考核7%</p><p>​    2021年12月20日前完成</p><h5 id="icoding平台编程实验-40"><a href="#icoding平台编程实验-40" class="headerlink" title="icoding平台编程实验 40%"></a>icoding平台编程实验 40%</h5><p>​    实验一 2021年10月18日截止</p><p>​    实验二2021年11月08日截止</p><p>​    实验三2021年11月15日截止</p><p>​    实验四2021年12月06日截止</p><p>​    实验五2021年12月13日截止</p><p>​    实验六2021年12月27日截止</p><p>具体截止时间均为当日23:55</p><h5 id="期末考试-50-1"><a href="#期末考试-50-1" class="headerlink" title="期末考试 50%"></a>期末考试 50%</h5><h1 id="通用英语B（彭焱老师的班）"><a href="#通用英语B（彭焱老师的班）" class="headerlink" title="通用英语B（彭焱老师的班）"></a>通用英语B（彭焱老师的班）</h1><h5 id="课堂教学-36"><a href="#课堂教学-36" class="headerlink" title="课堂教学 36%"></a>课堂教学 36%</h5><p>​    课堂任务 9%</p><p>​        个人课堂表现，非常规的课堂任务</p><p>​    小组作品（最少两次单元项目） 9%</p><p>​    基础测验（随堂单元测验） 9%</p><p>​    主题写作（批改网/教室评阅） 9%</p><h5 id="在线慕课（课程实验）-9"><a href="#在线慕课（课程实验）-9" class="headerlink" title="在线慕课（课程实验） 9%"></a>在线慕课（课程实验） 9%</h5><p>​    单元测验 3.6%</p><p>​        第一单元 2021年9月30日截止</p><p>​        </p><p>​    作业 3.6%</p><p>​        </p><p>​    讨论1.8%</p><p>​        在”课堂讨论“模块中回复超过8个数量的帖子</p><h5 id="口语实践（口语坊或随堂测试）-6"><a href="#口语实践（口语坊或随堂测试）-6" class="headerlink" title="口语实践（口语坊或随堂测试） 6%"></a>口语实践（口语坊或随堂测试） 6%</h5><h5 id="听力实训（U校园听力）-9"><a href="#听力实训（U校园听力）-9" class="headerlink" title="听力实训（U校园听力） 9%"></a>听力实训（U校园听力） 9%</h5><p>​    在线完成时间 2.7%</p><p>​        9小时</p><p>​    答题正确率 6.3%</p><p>​        Unit1 2021年9月26日截止</p><p>​        Unit2 2021年10月17日截止</p><p>​        Unit3 2021年11月7日截止</p><p>​        Unit4 2021年11月21日截止</p><p>​        Unit5 2021年12月5日截止</p><p>​        Unit6 2021年12月19日截止</p><h5 id="期末考试-40"><a href="#期末考试-40" class="headerlink" title="期末考试 40%"></a>期末考试 40%</h5><h1 id="线性代数与空间解析几何"><a href="#线性代数与空间解析几何" class="headerlink" title="线性代数与空间解析几何"></a>线性代数与空间解析几何</h1><h5 id="平时成绩-30-1"><a href="#平时成绩-30-1" class="headerlink" title="平时成绩 30%"></a>平时成绩 30%</h5><p>​    作业</p><p>​        讲到哪做到哪，每周四交作业</p><p>​    mooc测试</p><p>​        第一章单元检测题 2021年10月10日截止</p><p>​        第二章单元检测题 2021年11月21日截止</p><h5 id="期中考试-20-1"><a href="#期中考试-20-1" class="headerlink" title="期中考试 20%"></a>期中考试 20%</h5><h5 id="期末考试-50-2"><a href="#期末考试-50-2" class="headerlink" title="期末考试 50%"></a>期末考试 50%</h5><h1 id="中国近代史纲要"><a href="#中国近代史纲要" class="headerlink" title="中国近代史纲要"></a>中国近代史纲要</h1><p>云班课</p><h1 id="计算机思维导论"><a href="#计算机思维导论" class="headerlink" title="计算机思维导论"></a>计算机思维导论</h1><p>作业</p><h1 id="军事理论"><a href="#军事理论" class="headerlink" title="军事理论"></a>军事理论</h1><p>网课</p><h1 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h1><p>课外锻炼    36次</p><p>跑步 50km</p><h1 id="心理健康与创新能力"><a href="#心理健康与创新能力" class="headerlink" title="心理健康与创新能力"></a>心理健康与创新能力</h1><p>慕课单元测验2021年12月28日截止</p><p>慕课需要在课堂交流区讨论，有效回复老师发起的每个讨论贴，且总共加起来被赞数达到10个，可获得本部分成绩的满分</p><p><img src="https://i.loli.net/2021/10/06/GxVPpLjzqug1by7.gif" alt="cat"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串和格式化输入/输出</title>
      <link href="/fegnaon.blog/2021/10/06/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA/"/>
      <url>/fegnaon.blog/2021/10/06/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是一个或多个字符的序列，由双引号来表示，如 “Hello , World!” 就是一个字符串</p><p>C语言没有专门用于储存字符串的变量，字符串都被储存在char类型的数组中</p><p>|</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组是同类型数据元素的有序序列，由连续的储存单元组成</p><h5 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">40</span>];</span><br></pre></td></tr></table></figure><p>char表示每个元素的类型，name是数组的名字，方括号[]表示这是一个数组，40表示数组占用的字节数</p><p>|</p><p>字符串中除了字符本身，在字符串的最后还有一个非打印字符空字符’\0’来表示字符串的结束，C语言中的字符串一定以空字符结尾</p><p>ps:字符串”s”和字符’s’并不一样，字符串”s”实际上是由’s’和’\0’两个字符组成的</p><h4 id="strlen-函数和sizeof-函数"><a href="#strlen-函数和sizeof-函数" class="headerlink" title="strlen()函数和sizeof()函数"></a>strlen()函数和sizeof()函数</h4><p>sizeof()函数会以字节为单位返回参数的存储空间大小，即使某些储存空间没有字符，他们也会被算在内</p><p>strlen()函数会以字节为单位返回参数除’\0’之前的字符占用的存储空间的大小</p><p>两个函数的返回值类型均为size_t</p><p>ps:不同语言的文字的字符占用的空间的大小会因语言和编码不同而改变，比如utf-8中的一个汉字占3个字节</p><p>比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>] = “王大炮”;</span><br><span class="line"><span class="keyword">sizeof</span>(name);                    -&gt;<span class="number">20</span></span><br><span class="line"><span class="built_in">strlen</span>(name);                    -&gt;<span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="常量和C预处理器"><a href="#常量和C预处理器" class="headerlink" title="常量和C预处理器"></a>常量和C预处理器</h2><p>常量除了直接用他们本身表示之外，还可以使用符号常量</p><h4 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><ol><li><p>  声明一个变量，使之等于某个常量</p></li><li><p>用预处理器来定义常量，0</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO 0</span></span><br></pre></td></tr></table></figure><p>  这样可以防止ZERO的值改变，通常用大写表示符号常量，或在名称前面加c_或 k_</p></li><li><p>使用 const 关键字</p><p>  在声明变量时在变量类型前面加上 const 可以来限定一个变量为只读的，该变量的值就无法被改变，如</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ol><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>  能表达的信息更多，常量名通常可以表达比数字更多的信息，如0.98和 G </li><li>  更改常量值的时候只需要在定义常量名的地方改一次，不用每个地方都做改动</li></ol><h5 id="limits-h和float-h"><a href="#limits-h和float-h" class="headerlink" title="limits.h和float.h"></a>limits.h和float.h</h5><p>这两个头文件中，分别定义了一些整数类型和浮点数类型的大小限制相关的常量</p><p>比如CHAR_MAX , INT_MAX , ULONG_MIN或FLT_MAX , DBL_DIG等</p><h2 id="printf-和scanf"><a href="#printf-和scanf" class="headerlink" title="printf()和scanf()"></a>printf()和scanf()</h2><h3 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h3><p>printf()的格式为printf(格式化字符串，参数1，参数2……);</p><p>格式化字符串由实际要打印的字符串和转换说明组成，转换说明会按照一定方式被替换</p><h4 id="转换说明"><a href="#转换说明" class="headerlink" title="转换说明"></a>转换说明</h4><p>转换说明用百分号%来表示，格式转换说明符有如下几种</p><table><thead><tr><th>转换说明</th><th>输出</th></tr></thead><tbody><tr><td>%a</td><td>浮点数、十六进制数和p计数法</td></tr><tr><td>%A</td><td>浮点数、十六进制数和p计数法</td></tr><tr><td>%c</td><td>单个字符</td></tr><tr><td>%d</td><td>有符号十进制整数</td></tr><tr><td>%e</td><td>e记法十进制浮点数，e为小写</td></tr><tr><td>%E</td><td>e加法十进制浮点数，e为大写</td></tr><tr><td>%f</td><td>十进制浮点数</td></tr><tr><td>%g</td><td>根据值的不同，自动选择%f或%e</td></tr><tr><td>%G</td><td>根据值的不同，自动选择%f或%E</td></tr><tr><td>%i</td><td>有符号十进制整数</td></tr><tr><td>%o</td><td>无符号八进制整数</td></tr><tr><td>%p</td><td>指针</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%u</td><td>无符号十进制整数</td></tr><tr><td>%x</td><td>无符号十六进制整数，字母为小写</td></tr><tr><td>%X</td><td>无符号十六进制整数，字母为大写</td></tr><tr><td>%%</td><td>一个百分号%</td></tr></tbody></table><p>除了%%外，转换说明会依次与格式化字符串后面的参数一一对应，并且转换说明一定要和后面的参数想匹配，不然就会出错</p><h5 id="转换说明修饰符"><a href="#转换说明修饰符" class="headerlink" title="转换说明修饰符"></a>转换说明修饰符</h5><p>在百分号%和转换说明字符之间，还可以插入转换说明修饰符来修饰转换说明，格式转换说明修饰符有如下几种</p><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>标记</td><td>标记见下一个表格，可以同时使用多个标记</td></tr><tr><td>数字</td><td>最小字段宽度，输出的字段不会比数字中的值小，如果该字段宽度不能容纳要打印的内容，系统会增加宽度</td></tr><tr><td></td><td>如果最小字段宽度比要打印的内容大，默认用空格填充，并且空格加在左边</td></tr><tr><td>.数字</td><td>精度</td></tr><tr><td></td><td>对于%e,%E和%f,表示小数点右边数字的位数</td></tr><tr><td></td><td>对于%g和%G，表示有效数字的最大位数</td></tr><tr><td></td><td>对于%s，表示待打印字符的最大数量</td></tr><tr><td></td><td>对于整数，表示待打印数字的最小位数</td></tr><tr><td></td><td>如果位数不够，会用0来填充，0填充在左边</td></tr><tr><td></td><td>只用一个 . 而不加数字表示 .0</td></tr><tr><td>h</td><td>和整形转换说明一起使用，表示short类型，如%hi , %hu</td></tr><tr><td>hh</td><td>和整形转换说明一起使用，表示char或unsigned char类型</td></tr><tr><td>j</td><td>和整形转换说明一起使用，表示intmax_t或uintmax_t类型，这是stdint.h中的类型</td></tr><tr><td>l</td><td>和整形转换说明一起使用，表示long或unsigned long类型</td></tr><tr><td>ll</td><td>和整形转换说明一起使用，表示long或unsigned long long类型</td></tr><tr><td>L</td><td>和浮点转换说明一起使用，表示long double类型</td></tr><tr><td>t</td><td>和整形转换说明一起使用，表示ptrdiff_t类型，ptrdiff_t是两个指针差值的类型</td></tr><tr><td>z</td><td>和整形转换说明一起使用，表示size_t类型，size_t是sizeof()和strlen()返回的类型</td></tr></tbody></table><p>除此之外，还有一个特殊的*修饰符</p><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>可以代替前一个表中的数字，并在读取后面对于的参数来作为这个数字</td></tr></tbody></table><p>在printf()中，float类型的值会被自动转换为double类型，所有float和double都可以用%f</p><p>标记有如下五种</p><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>要打印的内容左对齐</td></tr><tr><td>+</td><td>若值为正，在值前打印+，若值为负，在值前打印-</td></tr><tr><td>空格</td><td>若值为正，在前面显示空格，若值为负，在之前显示-并覆盖空格</td></tr><tr><td>#</td><td>转化结果形式</td></tr><tr><td></td><td>对于%o , 在值前加上0</td></tr><tr><td></td><td>对于%x或%X , 在值前0x或0X</td></tr><tr><td></td><td>对于所有浮点格式，即时后面没有数字，也会打印一个小数点.</td></tr><tr><td>0</td><td>用0代替空格来填充字段宽度</td></tr><tr><td></td><td>对于整数，若出现-或指定精度，则忽略该标记</td></tr></tbody></table><h5 id="转换说明的意义"><a href="#转换说明的意义" class="headerlink" title="转换说明的意义"></a>转换说明的意义</h5><p>转换说明表示如何将计算机中储存的二进制数据转换为字符串，包括读取多大的储存空间，如何读取，如何转换等</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>printf()会返回打印字符的个数，如果输出错误，会返回一个负值。一般很少会用到，但在检查输出错误时可能会用到</p><h4 id="打印较长的字符串"><a href="#打印较长的字符串" class="headerlink" title="打印较长的字符串"></a>打印较长的字符串</h4><p>打印较长的字符串有3种方法</p><ol><li>  使用多个printf()语句</li><li>  在一行的最后加上\表示字符串还没有结束，会从下一行继续(包括下一行开头可能有的空格)</li><li>  使用多个” “,比如”hello” “world”会被自动合并成”helloworld”，中间的空格会被合并</li></ol><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h3><p>scanf()的格式为scanf(格式化字符串，参数1，参数2……);</p><p>与printf()不同，scanf的参数要使用指向变量的指针</p><p>对于基本变量类型的值，要在变量名前加上一个&amp;</p><p>对于数组类型的值，不要加&amp;</p><h5 id="格式转换说明"><a href="#格式转换说明" class="headerlink" title="格式转换说明"></a>格式转换说明</h5><table><thead><tr><th>转换说明</th><th>含义</th></tr></thead><tbody><tr><td>%c</td><td>把输入解释为单个字符</td></tr><tr><td>%d</td><td>把输入解释为有符号十进制整数</td></tr><tr><td>%e %f %g %a</td><td>把输入解释为浮点数</td></tr><tr><td>%E %F %G %A</td><td>把输入解释为浮点数</td></tr><tr><td>%i</td><td>把输入解释为有符号十进制整数</td></tr><tr><td>%o</td><td>把输入解释为有符号八进制整数</td></tr><tr><td>%p</td><td>把输入解释为指针</td></tr><tr><td>%s</td><td>把输入解释为字符串</td></tr><tr><td>%u</td><td>把输入解释为无符号十进制整数</td></tr><tr><td>%x %X</td><td>把输入解释为有符号十六进制整数</td></tr></tbody></table><h5 id="格式转换修饰"><a href="#格式转换修饰" class="headerlink" title="格式转换修饰"></a>格式转换修饰</h5><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>抑制赋值，只读取，但读到值不会赋给任何变量</td></tr><tr><td>数字</td><td>最大字段宽度，输入达到最大字段宽度时，停止读取</td></tr><tr><td>hh</td><td>把整数作为signed char或unsigned char类型读取</td></tr><tr><td>ll</td><td>把整数作为long long或unsigned long long类型读取</td></tr><tr><td>h</td><td>把整数作为short或unsigned short类型读取</td></tr><tr><td>l</td><td>把整数作为long或unsigned long类型读取</td></tr><tr><td></td><td>或把浮点数作为double类型读取</td></tr><tr><td>L</td><td>把浮点作为long double类型读取</td></tr><tr><td>j</td><td>表示使用intmax_t类型或uintmax_t类型</td></tr><tr><td>z</td><td>表示使用size_t类型</td></tr><tr><td>t</td><td>表示使用表示两个指针差值的类型</td></tr></tbody></table><p>在scanf()中，float类型要用%f，double类型要用%lf，不能够混用</p><h4 id="scanf-如何读取输入"><a href="#scanf-如何读取输入" class="headerlink" title="scanf()如何读取输入"></a>scanf()如何读取输入</h4><p>scanf()会从输入的第一个匹配的字符开始读取，比如%d会从一个数字或者正负号开始读取，到不匹配的字符或空白字符结束</p><p>空白字符是指 空格、回车和tab</p><p>使用最大字段宽度时，读取到最大字段款到时就会结束</p><p>读取完一个参数后，会从上一次读取结束的地方开始读取下一个参数</p><p>对于%c，会读取任何一个字符，包括空白字符</p><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><p>scanf()函数会返回成功读取的项数</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习,整数和浮点数</title>
      <link href="/fegnaon.blog/2021/10/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E6%95%B4%E6%95%B0%E5%92%8C%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>/fegnaon.blog/2021/10/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E6%95%B4%E6%95%B0%E5%92%8C%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><h4 id="整数的类型"><a href="#整数的类型" class="headerlink" title="整数的类型"></a>整数的类型</h4><p>​        C语言中，整数有 _Bool , char , short , int , long , long long  他们之间的区别在于占用的储存空间不同</p><h5 id="不同整数类型占用的储存空间"><a href="#不同整数类型占用的储存空间" class="headerlink" title="不同整数类型占用的储存空间"></a>不同整数类型占用的储存空间</h5><p>​        char 一定是占一个字节的位数，至少且一般为8位</p><p>​        C标准值规定了char &lt;= short &lt;= int &lt;= long &lt;= long long 具体大小由编译器决定</p><p>​        short至少占16位，long至少占32位，long long至少占64位</p><h5 id="不同整数类型能表示的整数的范围"><a href="#不同整数类型能表示的整数的范围" class="headerlink" title="不同整数类型能表示的整数的范围"></a>不同整数类型能表示的整数的范围</h5><p>​        各数据类型能表示的整数的范围由其占用的储存空间和是否带符号决定</p><p>​                带符号的情况下，因为计算机通过补码的方式表示正负数，若n为位数，则一个整数能表达的整数范围为 -2^(n-1)~2^(n-1)-1</p><p>​                        比如 带符号的 char 能表示的整数范围为 -128~127</p><p>​                不带符号的情况的，若n为位数，则一个整数能表达的整数范围为 0~2^n-1</p><p>​                        比如 不带符号的 char 能表示的整数范围为 0~255</p><p>​        如何表示一个整数带不带符号使用</p><p>​                对于 char 类型的整数，默认情况下带不带符号C标准没有规定，由使用的编译器决定</p><p>​                对于其他类型的整数，都是带符号的</p><p>​                使用unsigned关键能表示一个整数是不带符号，比如 unsigned char 一定是一个不带符号的char类型整数</p><p>​                使用signed关键字也可以强调一个整数是带符号的</p><h5 id="整数的声明"><a href="#整数的声明" class="headerlink" title="整数的声明"></a>整数的声明</h5><p>​        使用 整数类型关键 + 空格 + 变量名 可以声明一个整数，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x;</span><br></pre></td></tr></table></figure><p>就声明一个类型为int名为x的变量</p><p>​        声明short类型的整数时，整数类型关键字可以写成short int也可以吧int省略，long和long long类型的整数同理</p><p>​        在一行中可以声明多个变量，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x,y,z;</span><br></pre></td></tr></table></figure><p>声明的多个变量之间要用”,”隔开</p><p>​        声明时也可以直接为变量赋值，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>就表示声明一个类型为int名为x的变量，并为x变量赋为10</p><p>​        在一行中声明多个变量时也可以为变量赋值，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x,y,z = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>表示声明三个类型为int的变量，并将z变量赋值10（并不会给x和y赋值），想给那个变量赋值就在哪个变量后面写=，但一般情况下最好不要混着写。</p><h5 id="整数的赋值"><a href="#整数的赋值" class="headerlink" title="整数的赋值"></a>整数的赋值</h5><p>​        赋值</p><p>​                为整数变量赋值时，默认情况下是赋给变量十进制的数，比如 x = 10;后x等于十进制下的10；</p><p>​        也可以赋给变量八进制或者十六进制的数，在数字前加“0”表示八进制，加“0x”表示十六进制，比如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">012</span>;</span><br><span class="line">y = <span class="number">0x12</span>;</span><br></pre></td></tr></table></figure><p>​        表示x等于十进制下的10，y等于十进制下的18</p><h5 id="储存字符"><a href="#储存字符" class="headerlink" title="储存字符"></a>储存字符</h5><p>​        char类型常用语储存字符，char类型可以通过储存某个字符对应的ascii码来存储对应的字符</p><p>​        在赋值时也可以直接将一个字符常量赋给整数变量（在C语言中，使用单括号括起来的单个字符被称为字符常量），编译器将其转换为对应的ascii码。</p><p>​        打印时，使用%c可以对应ascii码对应的字符，使用%d可以打印存的数的十进制形式。</p><h4 id="可移植类型"><a href="#可移植类型" class="headerlink" title="可移植类型"></a>可移植类型</h4><h5 id="stdint-h"><a href="#stdint-h" class="headerlink" title="stdint.h"></a>stdint.h</h5><p>​        在stdint.h头文件中，有更多的类型名</p><p>​        精确宽度整数类型，如int32_t表示32位的有符号整数类型，</p><p>​        但某个系统对某个宽度可能并不支持，可以用 最小宽度类型，如int_least8_t表示可容纳8位有符号整数值的类型中宽度最小的类型</p><p>​        除此之外，还有intmax_t，int_fast8_t，uintmax_t等</p><h5 id="inttypes-h"><a href="#inttypes-h" class="headerlink" title="inttypes.h"></a>inttypes.h</h5><p>​        inttype.h头文件中包含了一些表示转换说明的宏，如RPId32表示32位的有符号整数</p><h5 id="整数常量的储存方式"><a href="#整数常量的储存方式" class="headerlink" title="整数常量的储存方式"></a>整数常量的储存方式</h5><p>​        通常，十进制整数常量会被储存为int类型，如果大于int类型的范围，会依次使用long和long long</p><p>​        对于八进制或十六进制的整数常量，会依次储存为int , unsigned int , long , unsigned long , long long , unsigned long long类型</p><p>​        如果需要指定储存方式，可以在数字后加上u或U表示unsigned，加上l或L表示long ,比如23uLL,32LU</p><h5 id="Bool类型"><a href="#Bool类型" class="headerlink" title="_Bool类型"></a>_Bool类型</h5><p>​        _Bool类型表示布尔值，用1表示true,用0表示false</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><h4 id="浮点数的类型"><a href="#浮点数的类型" class="headerlink" title="浮点数的类型"></a>浮点数的类型</h4><p>​        浮点有float , double , long double三种</p><h5 id="不同浮点数类型占用的储存空间"><a href="#不同浮点数类型占用的储存空间" class="headerlink" title="不同浮点数类型占用的储存空间"></a>不同浮点数类型占用的储存空间</h5><p>​        float占32位，double占64位，long double大于等于double</p><h5 id="不同浮点数类型能表示的浮点数的范围"><a href="#不同浮点数类型能表示的浮点数的范围" class="headerlink" title="不同浮点数类型能表示的浮点数的范围"></a>不同浮点数类型能表示的浮点数的范围</h5><p>​        浮点数在计算机由符号，小数，指数三部分组成</p><p>​        float指数能表示6位有效数字，且取值范围至少是10^(-37)~10^37</p><p>​        double至少能表示10位有效数字，且取值范围至少和float相同</p><p>​        long double的精度至少比double的高</p><h5 id="浮点数的声明"><a href="#浮点数的声明" class="headerlink" title="浮点数的声明"></a>浮点数的声明</h5><p>​        基本和整数的相同，且浮点数赋值时可以用e记法的数</p><h5 id="浮点型常量"><a href="#浮点型常量" class="headerlink" title="浮点型常量"></a>浮点型常量</h5><p>​        浮点型常量的基本形式是，有符号的带小数点的数字 + e或E + 表示指数的有符号的数字</p><p>​        其中，正号可以省略，小数点和指数可以省略其一，小数部分和整数部分可以省略其一</p><p>​        默认情况下，浮点型常量是double类型</p><p>​        同样，在数字后加上f或F，l或L来表示具体的类型，如3.2F ， 32E3L</p><h5 id="浮点值的上溢和下溢"><a href="#浮点值的上溢和下溢" class="headerlink" title="浮点值的上溢和下溢"></a>浮点值的上溢和下溢</h5><p>​        当一个浮点数超过当前类型能表达的最大范围是，就会上溢，这时，该变量会被赋一个表示无穷大的inf或infinity</p><p>​        当一个浮点数的指数部分是最小值的，再减小时会将小数点向左以，小数点部分的最后的一位数会被丢弃</p><h5 id="浮点数的精度"><a href="#浮点数的精度" class="headerlink" title="浮点数的精度"></a>浮点数的精度</h5><p>​        由于计算机中不能表示无穷多的数字</p><p>​        能存储的数字实际上是离散的，因此浮点数的储存，计算等也是存在误差的，在判断浮点数计算的结果的时，可以用增加一个允许的误差范围来得到想要的结果</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习,2</title>
      <link href="/fegnaon.blog/2021/10/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-2/"/>
      <url>/fegnaon.blog/2021/10/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>C程序示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>                   <span class="comment">/*一个简单的C程序*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    num = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am a simple &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;computer.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;My favortie number is %d because it is first .\n num&quot;</span>,num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>#include &lt;stdio.h&gt;</p></blockquote><p>该行作用相当于把stdio.h文件中的所有内容都输入该行所在的位置</p><p>#include 是一条C预处理器指令。通常，C编译器在编译前会对源代码做一些准备工作，即<em>预处理</em></p><p>stdio.h文件提供了输入输出函数(如printf())</p><p>通常，C程序顶部的信息集合被称为<em>头文件</em></p><blockquote><p>int main()</p></blockquote><p>C程序一定从main()函数开始执行，（）用于识别main是一个函数</p><blockquote><p>/* 一个简单的C程序 */</p></blockquote><p>注释，被/* 和 */ 包住的部分是程序的注释，能让人更容易明白所写的程序，注释会被编译器忽略</p><p>使用// 可以将某一行注释</p><blockquote><p>{}</p></blockquote><p>所有的C函数都使用花括号标记函数体的开始和结束</p><p>花括号还可以用于把函数中的多条语句合并为一个单元或块</p><blockquote><p>int num;</p></blockquote><p>这行代码叫做声明。该声明完成了两件事，一在函数中有一个名为num的变量，二int表明num变量是一个整数，编译器使用这些信息为num变量在内存中分配空间</p><p>int是C语言的一个<em>关键字</em>，表示一种基本的C语言数据类型。关键字是语言定义的单词，不能做其他用途。</p><p>num是一个<em>标识符</em>（一个变量、函数名或其他实体的名称)</p><p>​    变量可以用大小写字母数字下划线（_）来命名，而且名称的第一个字符必须是字母或者下划线，不能是数字</p><p>在C语言中，所有变量都必须先声明才能使用</p><blockquote><p>num = 1;</p></blockquote><p>这行代码是<em>赋值表达式语句</em>，会从右侧把值赋到左侧</p><blockquote><pre><code>printf(&quot;I am a simple &quot;);printf(&quot;computer.\n&quot;);printf(&quot;My favortie number is %d because it is first .\n num&quot;,num);</code></pre></blockquote><p>printf()是C语言的一个标准函数，（）表示printf是一个函数名，（）中的信息被称为参数，从main()函数传递给printf()函数。</p><p>更确切的说，是函数的实际参数。</p><p>​    在C语言中，实际参数是传递给函数的特定值，形式参数是函数中用于储存值的变量</p><p>\n的意思的换行，换行符是一个<em>转义序列</em>，转义序列用于表达难以表示或无法输入的字符</p><p>%d相当于是一个占位符，用来知名输出num的位置</p><blockquote><p>return 0；</p></blockquote><p>用于返回main()函数的返回值</p><h5 id="多条声明"><a href="#多条声明" class="headerlink" title="多条声明"></a>多条声明</h5><p>一条声明中可以声明多个变量，如int a,b;等价与int a; int b;</p><h5 id="加入函数"><a href="#加入函数" class="headerlink" title="加入函数"></a>加入函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> hanshu(<span class="keyword">void</span>)</span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="title">hanshu</span>(<span class="params"><span class="keyword">void</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">定义</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一行为<em>函数原型</em>，也被称为<em>函数原型</em>，指明了函数的属性（返回值类型，函数名，参数数量和类型）</p><p>倒数第四行和往后为函数定义，即是函数本身的源代码</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习,1</title>
      <link href="/fegnaon.blog/2021/10/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/fegnaon.blog/2021/10/05/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<h5 id="C语言优点"><a href="#C语言优点" class="headerlink" title="C语言优点"></a>C语言优点</h5><p> 1.设计特性</p><p>2.高效性</p><p>​        C语言具有微调控制能力，可以根据具体情况微调程序已获最大运行速度或最有效地使用内存</p><p>3.可移植性</p><p>​        C是可移植的语言，在一种系统中编写的C程序稍作修改或者不修改就可以在其他系统运行。（针对特殊硬件设备或操作系统特殊功能编写的部分桐城市不可移植的）</p><p>4.强大而灵活</p><p>5.面向程序员</p><h5 id="编程的7个步骤"><a href="#编程的7个步骤" class="headerlink" title="编程的7个步骤"></a>编程的7个步骤</h5><p>1.定义程序的目标</p><p>​        明确自己想做什么，程序需要哪些信息，需要进行哪些计算和控制，以及程序应该要报告什么信息。</p><p>2.设计程序</p><p>​        考虑如何用程序完成目标。如何组织程序，准备用多久完成程序，目标用户是谁…..</p><p>3.编写代码</p><p>4.编译</p><p>5.运行程序</p><p>6.测试和调试程序</p><p>7.维护和修改代码</p><h5 id="编译机制"><a href="#编译机制" class="headerlink" title="编译机制"></a>编译机制</h5><p>把源代码文件转换为可执行文件。典型的C实现通过编译和链接2个步骤来完成这一过程。</p><p>编译器把源代码转换为中间代码，链接器把中间代码和其他代码合并，生成可执行文件</p><p>中间文件有多种形式，最普遍的一种：把源代码转换为机器语言代码，并把结果放在目标文件中(还不是一个完整的程序)</p><p>目标文件缺少启动代码，启动代码充当程序和操作系统之间的接口</p><p>目标文件还缺少库函数</p><p>链接器将以上三者合并成一个文件。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21年10月4日</title>
      <link href="/fegnaon.blog/2021/10/04/21%E5%B9%B410%E6%9C%884%E6%97%A5%E8%AE%B0/"/>
      <url>/fegnaon.blog/2021/10/04/21%E5%B9%B410%E6%9C%884%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>​        今天做了个并查集的招新题。</p><p>​        一开始不知道啥是并查集，也没搜，就直接开始硬做，最后字符串数组强行弄出来一个，但是数据稍微一多就不行了。学oi的舍友回宿舍一看题，说并查集呀。我一搜，恍然大悟，发现自己真是个猪鼻</p><p>​        以后要开始做点算法题惹</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/fegnaon.blog/2021/10/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/fegnaon.blog/2021/10/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>人生中写的第一篇博客，主要就回顾反思一下前18年，和对未来的一些想法吧</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="出生—2021-6-10"><a href="#出生—2021-6-10" class="headerlink" title="出生—2021.6.10"></a>出生—2021.6.10</h3><p>​        从出生到高考结束，在计算机方面，大概就是个山东三线小城的普通孩子，只是会用电脑来打打游戏逛逛网页，对编程最深入的了解是为了通过小中考在信息课上学的visual basic(现在已经完全不记得当时学过啥…)。高中阶段也没接触过竞赛，也没有什么目标，只想着先尽量考高一点再说，就普普通通的度过的高中阶段，期间也没有怎么很努力过，高考前还天天拿平板在课上看小说（）。</p><h3 id="2021-6-10—2021-9-6"><a href="#2021-6-10—2021-9-6" class="headerlink" title="2021.6.10—2021.9.6"></a>2021.6.10—2021.9.6</h3><p>​        填报志愿时，因为没有喜欢也没有不喜欢的…，就准备选热门的软工或计科，出分前准备冲一冲哈尔滨工业大学(威海)的软件工程或山东大学(威海)的计算机，出分之后直接人品爆炸超常发挥从平常的省一万四五千名直接冲到省4000名，然后选来选去就把成电放在稳上的第一位。也不知道这个选的对不对，但既然来了，就要认真对待了。</p><p>​        9月6号第一天上课之前，每天就是玩玩玩，完全没有预习，不过在这期间也通过水群了解到成电有好多工作室，工作室里好多和厉害的人，而且进工作室不太容易…就准备从开始的上课的第一天开始，努力肝进工作室。</p><h3 id="2021-9-6—2021-10-3"><a href="#2021-9-6—2021-10-3" class="headerlink" title="2021.9.6—2021.10.3"></a>2021.9.6—2021.10.3</h3><p>​         第一个月怎么学的，学的啥现在已经不太能回想起来了，为了记录好自己的学习历程以便回顾复习，也因为招新题要求，从今天开始我要开始充实我的博客，记录一下每天的学习、解决的问题之类的。</p><p>​        第一个月我大概就是在b站看了看翁恺的C语言，做了一些招新题…好像也没干别的了…也不知道为啥这一个月过的这么快…</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>​        以后会尽力充实自己的博客，多写笔记多做记录，不让自己一头雾水吧</p><p>​        做招新题的时候我发现很多时候只是勉强完成了题目，达到的题目的要求，但对于写下的代码，和背后的原理，并没有很好的理解掌握。在招新笔试结束之前的这最后几天，还是会以完成招新题为第一目标，在这之后，我目前的想法是扎扎实实的打好基础(比如把《C primer plus》啃完)。</p><p>​        希望能进去起码一个工作室吧…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
